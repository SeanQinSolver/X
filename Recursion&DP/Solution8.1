//brutal
public class Solution {
	public int countWays(int n) {
		if (n < 0) return 0;
		else if (n == 0) return 1;
		else return countWays(n - 1) + countWays(n - 2) + countWays(n - 3); 
	}
}

//memoization this problem will overflow if n is greater than 37, use BigInteger class
public class Solution {
	public int countWays(int n) {
		int[] memo = new int[n + 1];
		Arrays.fill(memo, -1);
		return countWays(n, memo);
	}
 
	public int countWays(int n, int[] memo) {
		if (n < 0) return 0;
		else if (n == 0) return 1;
		else if (memo[n] > -1) return memo[0];
		else {
			memo[n] = countWays(n - 1, memo) + countWays(n - 2, memo) + countWays(n - 3, memo);
			return memo[n];
		}
	}
}