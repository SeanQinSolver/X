//solution1 count the cells in a x * y table
public class Solution{
	public int minProject(int a, int b) {
		int bigger = a < b ? b : a;
		int smaller = a < b ? a : b;
		return minProductHelper(smaller, bigger);
 	}

 	public int minProductHelper(int smaller, int bigger) {
 		if (smaller == 0) return 0;
 		else if (smaller == 1) return bigger;

 		int s = smaller >> 1;
 		int side1 = minProject(s, bigger);
 		int side2 = side1;
 		if (smaller % 2 == 1) sides = minProductHelper(smaller - s, bigger);
 		return side1 + side2; 
 	}
}

//solution2 use cache to memoization the content for avoiding duplicates calculation
publi class Solution {
	public int minProject(int a, int b) {
		int bigger = a < b ? b : a;
		int smaller = a < b ? a : b;
		int[] memo = new int[smaller + 1];
		return minProductHelper(smaller, bigger, memo);
	}

	public int minProductHelper(int smaller, int bigger, int[] memo) {
		if (smaller == 0) return 0;
		else if (smaller == 1) return bigger;
		else if (memo[smaller] > 0) return memo[smaller];

		int s = smaller >> 1; //Divde by 2
		int side1 = minProductHelper(s, bigger, memo);
		int side2 = side1; 
		if (smaller % 2 == 1) {
			side2 = minProductHelper(smaller - s, bigger, memo);
		}

		memo[smaller] = side1 + side2;
		return memo[smaller];
	}
}
//solution3 don need to use cache, just add the bigger to odd result.
public class Solution {
	public int minProject(int a, int b) {
		int bigger = a < b ? b : a;
		int smaller = a < b ? a : b;
		return minProductHelper(smaller, bigger);
	}
	public int minProductHelper(int smaller, int bigger) {
		if (smaller == 0) return 0;
		else if (smaller == 1) return bigger;

		int s = smaller >> 1;
		int halfProd = minProductHelper(s, bigger);

		if (smaller % 2 == 0) return halfProd + halfProd;
		else return halfProd + halfProd + bigger;
	}
}