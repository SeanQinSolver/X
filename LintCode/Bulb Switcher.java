public class Solution {
    public int bulbSwitch(int n) {
        int res = 1;
        while (res * res <= n) res++;
        return res - 1;
    }
}

//只有平方数的灯泡是亮着的


public class Solution {
    public int bulbSwitch(int n) {
        return (int)Math.sqrt(n);
    }
}

//只有平方数的灯泡是亮着的

//第n栈灯是在第n步的时候是否为亮着的，那么n的质因数为0-n的范围内被翻转了多少次。

其实这个题是个趣味智力题（brainteaser），只要对 n 开平方即为所求答案。但是思路很重要，往往简单的结果中隐含了独特的逻辑。

如果要保证某个灯在 n 次循环后状态是亮的，说明它被反转了奇数次。也就是说，在 1 ~ n 的数字中，可以被整除的次数为奇数，即有奇数个因子。

可以知道，数字 7 的因子是 [1, 7]，数字 8 的因子是 [1, 2, 4, 8]，9 的因子是 [1, 3, 9]，10 的因子是 [1, 2, 5, 10]... 可以通过数学知识得到，只有当数字为平方数（该数字等于某个数的平方）时，才有奇数个因子；非平方数的因子总有左右对应的相乘等于 n 的两个对应的数，因而因子个数一定是偶数。

那么这个题就成为了求 n 以内的平方数的个数。根据维基百科中给出的公式可以得知，n 以内的平方数的个数等于 floor(sqrt(n))，即 n 的开方的下界，而 (int) 转换就可以完成这个功能。